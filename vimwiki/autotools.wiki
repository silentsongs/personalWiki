= Autotools - A Practioner's Guide to GNU Autoconf, Automake, and Libtool =

== 第一章 总体介绍Autotools ==
Autotools的两个主要目的：
# 为你的程序的最终用户提供便利；
# 让你的程序在各种平台上都能顺利运行，甚至可能包括你完全没有测试过、安装过、甚至你的code也没在上面编译过的系统。

Autotools由三个GNU package组成：
# Autoconf，用来为项目产生configuration脚本；
# Automake，用于简化创建一致、可用的makefiles的过程；
# Libtool，provides an abstraction for the portable creation of shared libraries. （还不甚理解）

谁应该使用Autotools:
* 如果你在写基于Linux/Unix操作系统的开源软件，那么你应该使用autotools
* The Autotools provide you with a build environment that will allow your project to build successfully on future versions or distributions with virtually no changes to the build scripts

你什么时候不应该使用autotools:
* 只有当你在写不会在linux/unix系统上跑的软件的时候（比如基于windows的软件）,你不应该使用autotools。

=== *关于编程语言的选择* ===
Autotools是GNU组织设计出来用于管理GNU项目的，在GNU社区，两个因素决定了编程语言的重要性：
# 是否有任何GNU包是用这种语言实现的；
# GNU编译器工具组（toolset）是否支持这种语言。

基于以上两点的考虑，autotools原生支持以下编程语言（这里的支持意味着Autoconf will compile, link, and run source-level feature checks in these languages）：
* C
* C++
* Objective C
* Fortran
* Fortran 77
* Erlang

=== *环境的支持* ===
首先必须区分两个系统：
# Maintainer's system. 项目维护者的系统。
# End users' system. 项目使用者的系统。

GNU Autotools框架包括三个主要的GNU包：Autoconf、Automake、Libtool。这几个包里的工具能生成基于gettext, m4, sed, make, 和perl packages的代码。Autotools的设计目标决定了使用autotools来生成编译系统只应该依赖于已经预先在用户机器上预先装好的工具。

=== Autoconf ===
尽管configure脚本很复杂，用户只需要配置几个变量就可以正常运行。这些变量通常都是关于组件、功能、其他选项的选择，比如：
* 编译系统应该在哪里找库文件和头文件？
* 我希望把最终产生的可执行文件安装在哪里？
* 有哪些可选组件我希望编译？

Autoconf生成的configure脚本提供了一组通用的选项，这些选项对于所有运行在POSIX系统上的可移植软件项目都很重要。Autoconf包提供了以下几个程序：
* autoconf: 一个简单的Bourne shell脚本，主要功能是保证当前的shell能够运行M4宏预处理器。
* autoreconf：执行autoconf/automake/libtools包里的配置工具，它能根据timestamp来判断哪些需要重新生成。
* autoheader: 根据configure.ac里的配置生成C/C++兼容的头文件模板config.h.in, 当终端用户运行configure脚本的时候，configure会依据config.h.in生成config.h.
* autom4te：caching wrapper for M4. 
* autoscan: autoscan程序会为新项目自动创建默认的configure.ac文件，还能检查现有的Autotools项目是否有可增强的地方。
* autoupdate：更新configure.ac以及莫办文件(.in)，确保他们匹配当前版本Autotools的语法。
* ifnames

=== Automake ===
Automake把你项目中build process的简单配置转化为makefile语法，使其总能在第一次就正确运行，并且包含所有标准功能。Automake包以perl脚本的形式提供如下工具：
* automake：automake能够基于Makefile.am生成标准的makefile模板（Makefile.in）
* aclocal: 为项目生成aclocal.m4文件，包含用户定义的宏和所有Automake必需的宏。

=== Libtool ===
Libtool提供如下程序、库和头文件：
* libtool(程序)
* libtoolize（成都）
* ltdl(静态库和共享库)
* ltdl.h(头文件)

=== 构建你的程序包 ===
configure脚本除了会生成log文件，只会生成一个config.status的文件。

configure.ac里会配置期望运行平台的特性，configure脚本就是用来检查这些特性是否吻合。confgirure脚本会将各项检查结果放到生成的config.status里，然后执行这个脚本。接下来config.status会利用这些检查结果来生成平台相关的config.h和makefiles，以及其他在configure.ac里指定要实例化的文件。

使用下面的命令可以查看configure是如何被执行的：
* config.status --version 
{{{
[ksong@afdev01 trunk_debug]$ ./config.status --version
ads config.status 6.6.0
configured by ../test/src/configure, generated by GNU Autoconf 2.69,
  with options "'--enable-forecast' '--with-gsl=/opt/gsl-1.15/' '--with-lighttpd=/opt/lighttpd-1.4.21/' '--enable-debug'"

Copyright (C) 2012 Free Software Foundation, Inc.
This config.status script is free software; the Free Software Foundation
gives unlimited permission to copy, distribute and modify it.

}}}

如何在源文件路径之外build可执行文件：
{{{
$ gzip -dc doofabble-3.0.tar.gz | tar zxf - $ mkdir doofabble-3.0.debug
$ mkdir doofable-3.0.release
$ cd doofabble-3.0.debug
$ ../doofabble-3.0/configure --enable-debug ...
$ make
...
$ cd ../dofable-3.0.release $ ../doofabble-3.0/configure ...
$ make
}}}

== 第二章 理解GNU编程标准(GCS, GNU Coding Standard) ==

这一章的主要内容来自下面两个source:
# The GNU Coding Standards (GCS)
# The Filesystem Hierarchy Standard (FHS)

=== 项目结构 ===
