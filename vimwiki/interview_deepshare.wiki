== 奇点机智面试总结 ==

先是笔试，做了三道题；然后是面试，两个面试官。

笔试的三题分别是：
# 给定一个数组，返回其中最长单调非降序列的长度和起始位置。
# 写出你最常使用的三个linux bash命令，并解释其作用。
# 给定一个字符串，只包含字符和空格，组成一个句子。返回句子的反转。例子：输入“I am a programer”，返回“Programer a am I”.

第一题算是简单的动态规划，写了很长时间，但也算是完整细致的写出来了；

第二题求问的是三个，我答了三组：
	# cat/zcat/tail/grep等查看文件内容的命令
	# ls/du等看文件夹下文件列表和大小的命令
	# ps aux/lsof -i等查看进程的命令
第三题想不起来C++里处理String的API，直接偷懒用了python。


面试要有意思一些，CEO Sean直面，讲中文带点英文腔。先是给了一组定义：
* Set，包含一组数字
* Subset, 顾名思义，就是Set的子集，Set本身也是它的Subset
* Proper Subset，也是子集，但是比子集的定义窄，Set本身不是Proper Subset
* Maximal Proper Subset, 比Proper Subset更窄，所有Proper Subset中所含元素最多的是Maximal Proper Subset. 举例来说，对于Set [1,3,5], Maximal Proper Subset就是[1,3],[1,5],[3,5].

题目要求就是，给定一个Set，给出所有Maximal Proper Subset里各个元素的乘积。用上面的例子，就是要返回3,5,15.

# 我给的解法是把Set所有元素相乘得到x，然后遍历这个Set，每对一个元素做除法，就得到一个Maximal Proper Subset的乘积。
# Sean提的问题是这种解法是否有什么问题。初想之下问是否考虑溢出，回说不用考虑；觉得没有其他问题，于是让我先写写，也许能想到。写到一半才恍然没有考虑0的情况。于是提出一个0和几个0，情况不同。
# Sean提问时间复杂度，问做了几次乘法，几次除法。结论是n-1次乘法，n次除法。
# 接下来问如果一台机器有些问题，一次乘法需要一个时间单元，一次除法要十个时间单元，这样就是11n。问针对这种情况可否做优化。
# 我想了很久，在他的逐步引导下，才用动态规划写了出来。需要开辟2n的空间，把上一次的乘积结果保存下来。
# 我写这个的时候，用到了vector<int>, 于是他问我有没有什么问题。这个我答不上来。他又问数组和vector的区别，哪个快，哪个慢，为什么。这个也未能答上来。

除了这些，剩下的就是问项目，问我们如何为客户提供服务，这个就此略过了。

最后的结果是，觉得我思路不错，但是基础可能欠佳，想要再约一次。等下次吧~


