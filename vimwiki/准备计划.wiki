即将开始Google的电话技术面试，十分忐忑。把要求整理了一下，做了一些计划如下，希望能在面试前完成：

* [X] 过一遍leetcode上已经刷完的算法题，把经典的整理出来留待复习。 -- 1.5hrs
* [.] 从leetcode上已经刷完的题里，把涉及经典算法理论的抽出来，整理归档。-- 0.5hrs
* [.] 把所有基本数据结构的定义写一遍，包括链表、数、栈和队列。栈和队列这种要定义基本的操作。-- 0.5hrs
* [ ] 把leetcode上fail的submitted过一遍，看都是什么引起的错误。
* [ ] C++的常用数据结构和API. C++11和旧版C++特性的差别。unordered_map, unordered_set, 什么时候用set，什么时候用vector
* [ ] ACSII以及unicode等编码的概念和区别。
* [ ] 阅读算法书里的时间复杂度和空间复杂度分析的章节。-- 2hrs
* [ ] 搞清楚动态规划是怎么回事。一个鸡蛋从高楼上落下，多少次能找到鸡蛋不会被摔碎的最高楼层？ --3hrs
* [ ] 排序算法。每种排序算法的时间复杂度，重点看快排和merge sort. -- 2hrs
* [ ] 搞清楚hashtable的原理。只用数组实现hashtable. 搞清楚C++里，map的实现时间复杂度是怎样。 -- 1.5hrs
* [ ] 各种数据结构在c++里的实现方式和复杂度。 -- 0.5hrs
* [ ] 树：binary tree, trie tree. 了解平衡二叉树的构造方式，比如红黑树、splay tree、AVL tree. 树的遍历算法，搞清楚前序、中序、后序的区别。搞清楚BFS(广度优先)和DFS(深度优先)。-- 4hrs 
* [ ] 最小堆最大堆的时间复杂度和应用场景。 -- 1.5hrs
* [ ] 图的三种表现形式：对象和点，矩阵，邻接线。了解三种形式各自的优缺点。了解图的遍历算法，广度优先和深度优先，并能用code实现，分析算法复杂度和优缺点。nice to have: 了解Dijkstra和A*算法. -- 3hrs
* [ ] NPcomplete问题的经典case，例如traveling salesman和knapsacks 问题，能从问题中识别出来。搞清楚NPcomplete是什么意思。 -- 2hrs
* [ ] 数学方面可能涉及组合数据以及概率论。搞清楚它们的核心思想。要熟悉nchoosek（组合数学相关的东西？）和相关的一系列知识。 -- 2hrs
* [ ] 系统设计：要非常熟悉二进制，能大概估算相应设计需要多少机器。系统设计可能涉及到的话题包括：feature set, 接口，类继承，分布式系统，在特定约束条件下设计系统，简洁性和鲁棒性，以及tradeoffs. -- 1hr
* [ ] 了解RPC的基本概念，参数封装处理，以及网络数据传输的格式。知道www是怎么工作的，从浏览器端的行为开始，到服务器端的数据中心为止发生了什么。能够判断执行开销，内存、硬盘、本地网络和外网的时延。 -- 1hr
* [ ] 知道进程、线程和并发。知道锁和互斥量、信号量、monitors，以及他们如何工作。知道死锁和活锁以及如何避免它们。知道一个进程需要哪些资源，一个线程需要哪些资源，如何进行上下文切换，在操作系统层和硬件层是如何初始化的。知道一点scheduling(调度？)。世界在朝着多核发展，所以要知道最新的并发结构。 -- 2hrs
* [ ] 把需要重复练习的算法题在google doc上模拟完成。
